library(OpenStreetMap)
library(sf)
library(sp)
library(leaflet)
library(geojson)
library(RCurl)
library(RJSONIO)
library(plyr)
library(spatstat)
library(stats)
library(MASS)
library(maptools)
library(GISTools)
library(rgeos)
library(tmaptools)
library(raster)
library(fpc)
library(mapview)
library(reshape2)
library(reshape)
library(spdep)
library(spgwr)
library(corrplot)
library(GWmodel)
library(broom)
library(shiny)
library(shinyjs)
library(DT)
##### Data preparation ####
census <- read.csv("chicago_census.csv")
census <- census[-78,]
names(census)[1] <- "community.area.number"
census$community.area.number <- as.numeric(census$community.area.number)
rental <- read.csv("chicago_affordable_rental.csv")
rental <- rental[,c(2,9)]
names(rental)[1] <- "community.area.number"
names(rental)[2] <- "total.units"
rental$community.area.number <- as.numeric(rental$community.area.number)
rental <- aggregate(rental$total.units~rental$community.area.number, rental, sum)
names(rental)[1] <- "community.area.number"
names(rental)[2] <- "total.units"
life_e <- read.csv("chicago_ca_le.csv")
life_e <- life_e[-78,c(1,9)]
names(life_e)[1] <- "community.area.number"
life_e$community.area.number <- as.numeric(life_e$community.area.number)
ca_population <- read.csv("ca_population.csv")
ca_population <- ca_population[,c(-2)]
names(ca_population)[1] <- "community.area.number"
ca_population$ca_pop <- as.numeric(gsub(",","",ca_population$ca_pop))
ca_boundaries <- read_sf("chicago_ca.shp")
ca_boundaries <- ca_boundaries[,c(3,6,8:10)]
ca_boundaries$area_numbe <- as.numeric(ca_boundaries$area_numbe)
names(ca_boundaries)[1] <- "community.area.number"
chicago_merged <- list(census,life_e,rental,ca_population,ca_boundaries) %>%
reduce(left_join, by = "community.area.number")
chicago_merged[is.na(chicago_merged)] <- 0
chicago_merged <- chicago_merged[,c(-13)]
chicago_merged <- st_as_sf(chicago_merged)
chicago_merged$units_percap <- chicago_merged$total.units / chicago_merged$ca_pop
chicago_merged <- chicago_merged[,c(1:10,12,16,11,13:15)]
chicago_merged$PER.CAPITA.INCOME <- as.numeric(chicago_merged$PER.CAPITA.INCOME)
chicago_merged$HARDSHIP.INDEX <- as.numeric(chicago_merged$HARDSHIP.INDEX)
chicago_merged[is.na(chicago_merged)] <- 0
# centroids of CAs
chicago_mergedSP <- as(chicago_merged, "Spatial")
centroids <- coordinates(chicago_mergedSP)
chicago_mergedSP <- spTransform(chicago_mergedSP, "+proj=longlat +datum=WGS84")
chicago_merged <- as(chicago_mergedSP, "sf")
centroids1 <- as.data.frame(centroids)
names(centroids1)[1] <- "long"
names(centroids1)[2] <- "lat"
centroids1$community.area.number <- seq(1:77)
chicago_merged <- left_join(chicago_merged,centroids1, by = "community.area.number")
chicago_merged <- chicago_merged[,c(1,2,16,17,3:15,18)]
chicago_dt <- chicago_merged
chicago_dt <- as(chicago_dt, "Spatial")
# create neighbours list and spatial weights matrix
chic_neighbours <- poly2nb(chicago_mergedSP, queen = T)
chic.weights <- nb2listw(chic_neighbours, style = "C")
##### GWR analysis ####
# simple MLR first. Stepwise regression to find the regressors to include.
fullmodel <- lm(chicago_merged$units_percap ~ chicago_merged$PERCENT.OF.HOUSING.CROWDED + chicago_merged$PERCENT.HOUSEHOLDS.BELOW.POVERTY +
chicago_merged$PERCENT.AGED.16..UNEMPLOYED + chicago_merged$PERCENT.AGED.25..WITHOUT.HIGH.SCHOOL.DIPLOMA
+ chicago_merged$PERCENT.AGED.UNDER.18.OR.OVER.64 + chicago_merged$PER.CAPITA.INCOME +
chicago_merged$X2010.Life.Expectancy,
data = chicago_merged)
step.model <- stepAIC(fullmodel, direction = "both", trace = FALSE)
summary(step.model)
step_results <- tidy(step.model)
step_resid <- step.model$residuals
chicago_merged <- cbind(chicago_merged,step_resid)
moran.test(chicago_merged$step_resid,chic.weights)
# presense of spatial-autocorrelation in the residuals? Use GWR instead.
##### Hotspot analysis
# calculate Local G to find hot and coldspots, based on each community area
varnames <- colnames(chicago_mergedSP@data[,3:13])
allG <- cbind(lapply(chicago_mergedSP@data[,3:13], function(x) localG(x,chic.weights)))
all_localGi <- data.frame(matrix(unlist(allG), ncol=11))
colnames(all_localGi) <- varnames
all_I <- lapply(chicago_mergedSP@data[,3:13], function(x) localmoran(x,chic.weights)[,4])
all_localmor <- data.frame(matrix(unlist(all_I), ncol=11))
colnames(all_localmor) <- varnames
all_localGi$community.area.number <- seq(1:77)
all_localmor$community.area.number <- seq(1:77)
spatial_scores <- left_join(all_localGi,all_localmor, by = "community.area.number")
chicago_merged <- left_join(chicago_merged,spatial_scores, by = "community.area.number")
# calculate kernel bandwidth
GWRbandwidth <- gwr.sel(chicago_merged$units_percap ~ chicago_merged$PERCENT.OF.HOUSING.CROWDED + chicago_merged$PERCENT.HOUSEHOLDS.BELOW.POVERTY,
data = chicago_merged, coords = centroids, adapt = T)
# Dependent: units/cap, independent: hardship index, life expectancy, contains ssa
gwr.model <- gwr(chicago_merged$units_percap ~ chicago_merged$PERCENT.OF.HOUSING.CROWDED + chicago_merged$PERCENT.HOUSEHOLDS.BELOW.POVERTY, data = chicago_merged, coords = centroids, adapt = GWRbandwidth, hatmatrix = TRUE, se.fit = TRUE)
gwr.results <- as.data.frame(gwr.model$SDF)
gwr.results$community.area.number <- seq(1:77)
gwr.results <- gwr.results[,c(18,3,4,6,7)]
# calculate z-scores --> (coef-mean)/se. this shows direction of relationship and statistical significance.
gwr.results$crowded_z <- (gwr.results$chicago_merged.PERCENT.OF.HOUSING.CROWDED - mean(gwr.results$chicago_merged.PERCENT.OF.HOUSING.CROWDED)) / gwr.results$chicago_merged.PERCENT.OF.HOUSING.CROWDED_se
gwr.results$poverty_z <- (gwr.results$chicago_merged.PERCENT.HOUSEHOLDS.BELOW.POVERTY - mean(gwr.results$chicago_merged.PERCENT.HOUSEHOLDS.BELOW.POVERTY)) / gwr.results$chicago_merged.PERCENT.HOUSEHOLDS.BELOW.POVERTY_se
chicago_merged_gwr <- left_join(chicago_merged,gwr.results, by = "community.area.number")
as.character(chicago_merged_gwr$COMMUNITY.AREA.NAME)
chicago_mergedSP <- as(chicago_merged_gwr, "Spatial")
##### Mapping our results ####
z_breaks1 <- c(-10,-1.96,-1.645,1.645,1.96,10)
runApp()
setwd("C:/Users/awws9/Documents/final_assessment/GIS_coursework_assessment")
##### Libraries #####
library(tmap)
library(geojsonio)
library(magrittr)
library(dplyr)
library(RColorBrewer)
library(rgdal)
library(tidyverse)
library(ggplot2)
library(ggmap)
library(OpenStreetMap)
library(sf)
library(sp)
library(leaflet)
library(geojson)
library(RCurl)
library(RJSONIO)
library(plyr)
library(spatstat)
library(stats)
library(MASS)
library(maptools)
library(GISTools)
library(rgeos)
library(tmaptools)
library(raster)
library(fpc)
library(mapview)
library(reshape2)
library(reshape)
library(spdep)
library(spgwr)
library(corrplot)
library(GWmodel)
library(broom)
library(shiny)
library(shinyjs)
library(DT)
##### Data preparation ####
census <- read.csv("chicago_census.csv")
census <- census[-78,]
names(census)[1] <- "community.area.number"
census$community.area.number <- as.numeric(census$community.area.number)
rental <- read.csv("chicago_affordable_rental.csv")
rental <- rental[,c(2,9)]
names(rental)[1] <- "community.area.number"
names(rental)[2] <- "total.units"
rental$community.area.number <- as.numeric(rental$community.area.number)
rental <- aggregate(rental$total.units~rental$community.area.number, rental, sum)
names(rental)[1] <- "community.area.number"
names(rental)[2] <- "total.units"
life_e <- read.csv("chicago_ca_le.csv")
life_e <- life_e[-78,c(1,9)]
names(life_e)[1] <- "community.area.number"
life_e$community.area.number <- as.numeric(life_e$community.area.number)
ca_population <- read.csv("ca_population.csv")
ca_population <- ca_population[,c(-2)]
names(ca_population)[1] <- "community.area.number"
ca_population$ca_pop <- as.numeric(gsub(",","",ca_population$ca_pop))
ca_boundaries <- read_sf("chicago_ca.shp")
ca_boundaries <- ca_boundaries[,c(3,6,8:10)]
ca_boundaries$area_numbe <- as.numeric(ca_boundaries$area_numbe)
names(ca_boundaries)[1] <- "community.area.number"
chicago_merged <- list(census,life_e,rental,ca_population,ca_boundaries) %>%
reduce(left_join, by = "community.area.number")
chicago_merged[is.na(chicago_merged)] <- 0
chicago_merged <- chicago_merged[,c(-13)]
chicago_merged <- st_as_sf(chicago_merged)
chicago_merged$units_percap <- chicago_merged$total.units / chicago_merged$ca_pop
chicago_merged <- chicago_merged[,c(1:10,12,16,11,13:15)]
chicago_merged$PER.CAPITA.INCOME <- as.numeric(chicago_merged$PER.CAPITA.INCOME)
chicago_merged$HARDSHIP.INDEX <- as.numeric(chicago_merged$HARDSHIP.INDEX)
chicago_merged[is.na(chicago_merged)] <- 0
# centroids of CAs
chicago_mergedSP <- as(chicago_merged, "Spatial")
centroids <- coordinates(chicago_mergedSP)
chicago_mergedSP <- spTransform(chicago_mergedSP, "+proj=longlat +datum=WGS84")
chicago_merged <- as(chicago_mergedSP, "sf")
centroids1 <- as.data.frame(centroids)
names(centroids1)[1] <- "long"
names(centroids1)[2] <- "lat"
centroids1$community.area.number <- seq(1:77)
chicago_merged <- left_join(chicago_merged,centroids1, by = "community.area.number")
chicago_merged <- chicago_merged[,c(1,2,16,17,3:15,18)]
chicago_dt <- chicago_merged
chicago_dt <- as(chicago_dt, "Spatial")
# create neighbours list and spatial weights matrix
chic_neighbours <- poly2nb(chicago_mergedSP, queen = T)
chic.weights <- nb2listw(chic_neighbours, style = "C")
##### GWR analysis ####
# simple MLR first. Stepwise regression to find the regressors to include.
fullmodel <- lm(chicago_merged$units_percap ~ chicago_merged$PERCENT.OF.HOUSING.CROWDED + chicago_merged$PERCENT.HOUSEHOLDS.BELOW.POVERTY +
chicago_merged$PERCENT.AGED.16..UNEMPLOYED + chicago_merged$PERCENT.AGED.25..WITHOUT.HIGH.SCHOOL.DIPLOMA
+ chicago_merged$PERCENT.AGED.UNDER.18.OR.OVER.64 + chicago_merged$PER.CAPITA.INCOME +
chicago_merged$X2010.Life.Expectancy,
data = chicago_merged)
step.model <- stepAIC(fullmodel, direction = "both", trace = FALSE)
summary(step.model)
step_results <- tidy(step.model)
step_resid <- step.model$residuals
chicago_merged <- cbind(chicago_merged,step_resid)
moran.test(chicago_merged$step_resid,chic.weights)
# presense of spatial-autocorrelation in the residuals? Use GWR instead.
##### Hotspot analysis
# calculate Local G to find hot and coldspots, based on each community area
varnames <- colnames(chicago_mergedSP@data[,3:13])
allG <- cbind(lapply(chicago_mergedSP@data[,3:13], function(x) localG(x,chic.weights)))
all_localGi <- data.frame(matrix(unlist(allG), ncol=11))
colnames(all_localGi) <- varnames
all_I <- lapply(chicago_mergedSP@data[,3:13], function(x) localmoran(x,chic.weights)[,4])
all_localmor <- data.frame(matrix(unlist(all_I), ncol=11))
colnames(all_localmor) <- varnames
all_localGi$community.area.number <- seq(1:77)
all_localmor$community.area.number <- seq(1:77)
spatial_scores <- left_join(all_localGi,all_localmor, by = "community.area.number")
chicago_merged <- left_join(chicago_merged,spatial_scores, by = "community.area.number")
# calculate kernel bandwidth
GWRbandwidth <- gwr.sel(chicago_merged$units_percap ~ chicago_merged$PERCENT.OF.HOUSING.CROWDED + chicago_merged$PERCENT.HOUSEHOLDS.BELOW.POVERTY,
data = chicago_merged, coords = centroids, adapt = T)
# Dependent: units/cap, independent: hardship index, life expectancy, contains ssa
gwr.model <- gwr(chicago_merged$units_percap ~ chicago_merged$PERCENT.OF.HOUSING.CROWDED + chicago_merged$PERCENT.HOUSEHOLDS.BELOW.POVERTY, data = chicago_merged, coords = centroids, adapt = GWRbandwidth, hatmatrix = TRUE, se.fit = TRUE)
gwr.results <- as.data.frame(gwr.model$SDF)
gwr.results$community.area.number <- seq(1:77)
gwr.results <- gwr.results[,c(18,3,4,6,7)]
# calculate z-scores --> (coef-mean)/se. this shows direction of relationship and statistical significance.
gwr.results$crowded_z <- (gwr.results$chicago_merged.PERCENT.OF.HOUSING.CROWDED - mean(gwr.results$chicago_merged.PERCENT.OF.HOUSING.CROWDED)) / gwr.results$chicago_merged.PERCENT.OF.HOUSING.CROWDED_se
gwr.results$poverty_z <- (gwr.results$chicago_merged.PERCENT.HOUSEHOLDS.BELOW.POVERTY - mean(gwr.results$chicago_merged.PERCENT.HOUSEHOLDS.BELOW.POVERTY)) / gwr.results$chicago_merged.PERCENT.HOUSEHOLDS.BELOW.POVERTY_se
chicago_merged_gwr <- left_join(chicago_merged,gwr.results, by = "community.area.number")
as.character(chicago_merged_gwr$COMMUNITY.AREA.NAME)
chicago_mergedSP <- as(chicago_merged_gwr, "Spatial")
##### Mapping our results ####
z_breaks1 <- c(-10,-1.96,-1.645,1.645,1.96,10)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/awws9/Documents/final_assessment/GIS_coursework_assessment")
##### Libraries #####
library(tmap)
library(geojsonio)
library(magrittr)
library(dplyr)
library(RColorBrewer)
library(rgdal)
library(tidyverse)
library(ggplot2)
library(ggmap)
library(OpenStreetMap)
library(sf)
library(sp)
library(leaflet)
library(geojson)
library(RCurl)
library(RJSONIO)
library(plyr)
library(spatstat)
library(stats)
library(MASS)
library(maptools)
library(GISTools)
library(rgeos)
library(tmaptools)
library(raster)
library(fpc)
library(mapview)
library(reshape2)
library(reshape)
library(spdep)
library(spgwr)
library(corrplot)
library(GWmodel)
library(broom)
library(shiny)
library(shinyjs)
library(DT)
##### Data preparation ####
census <- read.csv("chicago_census.csv")
census <- census[-78,]
names(census)[1] <- "community.area.number"
census$community.area.number <- as.numeric(census$community.area.number)
rental <- read.csv("chicago_affordable_rental.csv")
rental <- rental[,c(2,9)]
names(rental)[1] <- "community.area.number"
names(rental)[2] <- "total.units"
rental$community.area.number <- as.numeric(rental$community.area.number)
rental <- aggregate(rental$total.units~rental$community.area.number, rental, sum)
names(rental)[1] <- "community.area.number"
names(rental)[2] <- "total.units"
life_e <- read.csv("chicago_ca_le.csv")
life_e <- life_e[-78,c(1,9)]
names(life_e)[1] <- "community.area.number"
life_e$community.area.number <- as.numeric(life_e$community.area.number)
ca_population <- read.csv("ca_population.csv")
ca_population <- ca_population[,c(-2)]
names(ca_population)[1] <- "community.area.number"
ca_population$ca_pop <- as.numeric(gsub(",","",ca_population$ca_pop))
ca_boundaries <- read_sf("chicago_ca.shp")
ca_boundaries <- ca_boundaries[,c(3,6,8:10)]
ca_boundaries$area_numbe <- as.numeric(ca_boundaries$area_numbe)
names(ca_boundaries)[1] <- "community.area.number"
chicago_merged <- list(census,life_e,rental,ca_population,ca_boundaries) %>%
reduce(left_join, by = "community.area.number")
chicago_merged[is.na(chicago_merged)] <- 0
chicago_merged <- chicago_merged[,c(-13)]
chicago_merged <- st_as_sf(chicago_merged)
chicago_merged$units_percap <- chicago_merged$total.units / chicago_merged$ca_pop
chicago_merged <- chicago_merged[,c(1:10,12,16,11,13:15)]
chicago_merged$PER.CAPITA.INCOME <- as.numeric(chicago_merged$PER.CAPITA.INCOME)
chicago_merged$HARDSHIP.INDEX <- as.numeric(chicago_merged$HARDSHIP.INDEX)
chicago_merged[is.na(chicago_merged)] <- 0
# centroids of CAs
chicago_mergedSP <- as(chicago_merged, "Spatial")
centroids <- coordinates(chicago_mergedSP)
chicago_mergedSP <- spTransform(chicago_mergedSP, "+proj=longlat +datum=WGS84")
chicago_merged <- as(chicago_mergedSP, "sf")
centroids1 <- as.data.frame(centroids)
names(centroids1)[1] <- "long"
names(centroids1)[2] <- "lat"
centroids1$community.area.number <- seq(1:77)
chicago_merged <- left_join(chicago_merged,centroids1, by = "community.area.number")
chicago_merged <- chicago_merged[,c(1,2,16,17,3:15,18)]
chicago_dt <- chicago_merged
chicago_dt <- as(chicago_dt, "Spatial")
# create neighbours list and spatial weights matrix
chic_neighbours <- poly2nb(chicago_mergedSP, queen = T)
chic.weights <- nb2listw(chic_neighbours, style = "C")
##### GWR analysis ####
# simple MLR first. Stepwise regression to find the regressors to include.
fullmodel <- lm(chicago_merged$units_percap ~ chicago_merged$PERCENT.OF.HOUSING.CROWDED + chicago_merged$PERCENT.HOUSEHOLDS.BELOW.POVERTY +
chicago_merged$PERCENT.AGED.16..UNEMPLOYED + chicago_merged$PERCENT.AGED.25..WITHOUT.HIGH.SCHOOL.DIPLOMA
+ chicago_merged$PERCENT.AGED.UNDER.18.OR.OVER.64 + chicago_merged$PER.CAPITA.INCOME +
chicago_merged$X2010.Life.Expectancy,
data = chicago_merged)
step.model <- stepAIC(fullmodel, direction = "both", trace = FALSE)
summary(step.model)
step_results <- tidy(step.model)
step_resid <- step.model$residuals
chicago_merged <- cbind(chicago_merged,step_resid)
moran.test(chicago_merged$step_resid,chic.weights)
# presense of spatial-autocorrelation in the residuals? Use GWR instead.
##### Hotspot analysis
# calculate Local G to find hot and coldspots, based on each community area
varnames <- colnames(chicago_mergedSP@data[,3:13])
allG <- cbind(lapply(chicago_mergedSP@data[,3:13], function(x) localG(x,chic.weights)))
all_localGi <- data.frame(matrix(unlist(allG), ncol=11))
colnames(all_localGi) <- varnames
all_I <- lapply(chicago_mergedSP@data[,3:13], function(x) localmoran(x,chic.weights)[,4])
all_localmor <- data.frame(matrix(unlist(all_I), ncol=11))
colnames(all_localmor) <- varnames
all_localGi$community.area.number <- seq(1:77)
all_localmor$community.area.number <- seq(1:77)
spatial_scores <- left_join(all_localGi,all_localmor, by = "community.area.number")
chicago_merged <- left_join(chicago_merged,spatial_scores, by = "community.area.number")
# calculate kernel bandwidth
GWRbandwidth <- gwr.sel(chicago_merged$units_percap ~ chicago_merged$PERCENT.OF.HOUSING.CROWDED + chicago_merged$PERCENT.HOUSEHOLDS.BELOW.POVERTY,
data = chicago_merged, coords = centroids, adapt = T)
# Dependent: units/cap, independent: hardship index, life expectancy, contains ssa
gwr.model <- gwr(chicago_merged$units_percap ~ chicago_merged$PERCENT.OF.HOUSING.CROWDED + chicago_merged$PERCENT.HOUSEHOLDS.BELOW.POVERTY, data = chicago_merged, coords = centroids, adapt = GWRbandwidth, hatmatrix = TRUE, se.fit = TRUE)
gwr.results <- as.data.frame(gwr.model$SDF)
gwr.results$community.area.number <- seq(1:77)
gwr.results <- gwr.results[,c(18,3,4,6,7)]
# calculate z-scores --> (coef-mean)/se. this shows direction of relationship and statistical significance.
gwr.results$crowded_z <- (gwr.results$chicago_merged.PERCENT.OF.HOUSING.CROWDED - mean(gwr.results$chicago_merged.PERCENT.OF.HOUSING.CROWDED)) / gwr.results$chicago_merged.PERCENT.OF.HOUSING.CROWDED_se
gwr.results$poverty_z <- (gwr.results$chicago_merged.PERCENT.HOUSEHOLDS.BELOW.POVERTY - mean(gwr.results$chicago_merged.PERCENT.HOUSEHOLDS.BELOW.POVERTY)) / gwr.results$chicago_merged.PERCENT.HOUSEHOLDS.BELOW.POVERTY_se
chicago_merged_gwr <- left_join(chicago_merged,gwr.results, by = "community.area.number")
as.character(chicago_merged_gwr$COMMUNITY.AREA.NAME)
chicago_mergedSP <- as(chicago_merged_gwr, "Spatial")
##### Mapping our results ####
z_breaks1 <- c(-10,-1.96,-1.645,1.645,1.96,10)
View(chicago_merged)
summary(chicago_merged[,3:15])
desc_stats <- summary(chicago_merged[,3:15])
write.csv(desc_stats,"desc_stats.csv")
desc_stats <- tidy(desc_stats)
write.csv(desc_stats,"desc_stats.csv")
write.csv(desc_stats,"desc_stats.csv")
View(desc_stats)
library(Hmisc)
desc_stats <- describe(chicago_merged[,5:15])
desc_stats <- describe(chicago_merged)
desc_stats <- summarise(chicago_merged)
desc_stats <- summarise(chicago_merged[,c(5:15)])
summary(chicago_merged[,c(5:15)])
View(desc_stats)
desc_stats <- summary(chicago_merged[,c(5:15)])
desc_stats <- as.data.frame(desc_stats)
View(desc_stats)
desc_stats <- summary(chicago_merged[,c(5:15)])
desc_stats <- tidy(desc_stats)
desc_stats <- summary(chicago_merged[,c(5:15)])
library(pastecs)
stat.desc(chicago_merged)
desc_stats <- stat.desc(chicago_merged)
View(desc_stats)
desc_stats <- stat.desc(chicago_merged[,5:15])
desc_stats <- stat.desc(chicago_merged[,5:14])
write.csv(desc_stats,"desc_stats.csv")
crs(chicago_mergedSP)
st_crs(chicago_merged_gwr)
globalG.test(chicago_merged)
globalG.test(chicago_mergedSP, chic.weights)
moran.test(chicago_merged$step_resid,chic.weights)
globalG.test(chicago_mergedSP,chic.weights)
globalG.test(chicago_merged$step_resid,chic.weights)
globalG.test(chicago_merged$total.units.y,chic.weights)
globalG.test(chicago_merged$units_percap,chic.weights)
View(step_results)
View(gwr.model)
# check residuals of gwr
gwr_residuals <- as.data.frame(gwr.model$lm$residuals)
View(gwr_residuals)
scatter.smooth(gwr_residuals)
histogram(gwr_residuals)
shapiro.test(gwr_residuals)
as.numeric(gwr_residuals)
as.numeric(gwr_residuals$`gwr.model$lm$residuals`)
shapiro.test(gwr_residuals$`gwr.model$lm$residuals`)
bptest.sarlm(gwr_residuals$`gwr.model$lm$residuals`)
shapiro.test(gwr.model$lm)
shapiro.test(gwr.model$lm$residuals)
library(lmtest)
step.model <- stepAIC(fullmodel, direction = "both", trace = FALSE)
summary(step.model)
View(gwr.results)
# Dependent: units/cap, independent: hardship index, life expectancy, contains ssa
gwr.model <- gwr(chicago_merged$units_percap ~ chicago_merged$PERCENT.OF.HOUSING.CROWDED + chicago_merged$PERCENT.HOUSEHOLDS.BELOW.POVERTY, data = chicago_merged, coords = centroids, adapt = GWRbandwidth, hatmatrix = TRUE, se.fit = TRUE)
gwr.model
moran.test(gwr.model$lm$residuals, chic.weights)
moran.test(chicago_merged$step_resid,chic.weights)
moran.test(chicago_merged,chic.weights)
View(gwr_residuals)
View(gwr.results)
# Dependent: units/cap, independent: hardship index, life expectancy, contains ssa
gwr.model <- gwr(chicago_merged$units_percap ~ chicago_merged$PERCENT.OF.HOUSING.CROWDED + chicago_merged$PERCENT.HOUSEHOLDS.BELOW.POVERTY, data = chicago_merged, coords = centroids, adapt = GWRbandwidth, hatmatrix = TRUE, se.fit = TRUE)
gwr.results <- as.data.frame(gwr.model$SDF)
?gwr
?gwr$SDF
?gwr.SDF
??gwr.SDF
?gwr
# check residuals of gwr
gwr_residuals <- as.data.frame(gwr.model$SDF$pred.se)
qqline(gwr_residuals)
# check residuals of gwr
gwr_residuals <- as.data.frame(gwr.model$SDF$gwr.e)
qqline(gwr_residuals)
qqplot(gwr_residuals)
qqnorm(gwr_residuals)
qqplot(gwr_residuals)
qqplot(gwr_residuals$`gwr.model$SDF$gwr.e`)
gwr_residuals$community.area.number <- seq(1:77)
qqplot(gwr_residuals$`gwr.model$SDF$gwr.e`)
qqPlot(gwr_residuals$`gwr.model$SDF$gwr.e`)
shapiro.test(gwr_residuals$`gwr.model$SDF$gwr.e`)
moran.test(gwr_residuals$`gwr.model$SDF$gwr.e`,chic.weights)
moran.test(chicago_merged$step_resid,chic.weights)
bptest(gwr.results$gwr.e)
scatter.smooth(gwr_residuals)
shapiro.test(gwr_residuals)
shapiro.test(gwr_residuals$`gwr.model$SDF$gwr.e`)
library(tseries)
jarque.bera.test(gwr_residuals)
globalG.test(chicago_merged$step_resid,chic.weights)
library(citr)
citr:::insert_citation()
setwd("C:/Users/awws9/Documents/final_assessment/GIS_coursework_assessment/GIS_assessment_report")
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
setwd("C:/Users/awws9/Documents/final_assessment/GIS_coursework_assessment/GIS_assessment_report")
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
